/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * @Generated by gentest/gentest.sh with the following input
 *
<div id="margin_start" style="width: 100px; height: 100px; flex-direction: row;">
  <div style="width: 10px; margin-start: 10px;"></div>
</div>

<div id="margin_top" style="width: 100px; height: 100px;">
  <div style="height: 10px; margin-top: 10px;"></div>
</div>

<div id="margin_end" style="width: 100px; height: 100px; flex-direction: row; justify-content: flex-end;">
  <div style="width: 10px; margin-end: 10px;"></div>
</div>

<div id="margin_bottom" style="width: 100px; height: 100px; justify-content: flex-end;">
  <div style="height: 10px; margin-bottom: 10px;"></div>
</div>

<div id="margin_and_flex_row" style="width: 100px; height: 100px; flex-direction: row;">
  <div style="margin-start: 10px; margin-end; 10px; flex-grow: 1;"></div>
</div>

<div id="margin_and_flex_column" style="width: 100px; height: 100px;">
  <div style="margin-top: 10px; margin-bottom; 10px; flex-grow: 1;"></div>
</div>

<div id="margin_and_stretch_row" style="width: 100px; height: 100px; flex-direction: row;">
  <div style="margin-top: 10px; margin-bottom; 10px; flex-grow: 1;"></div>
</div>

<div id="margin_and_stretch_column" style="width: 100px; height: 100px;">
  <div style="margin-start: 10px; margin-end; 10px; flex-grow: 1;"></div>
</div>

<div id="margin_with_sibling_row" style="width: 100px; height: 100px; flex-direction: row;">
  <div style="margin-end; 10px; flex-grow: 1;"></div>
  <div style="flex-grow: 1;"></div>
</div>

<div id="margin_with_sibling_column" style="width: 100px; height: 100px;">
  <div style="margin-bottom; 10px; flex-grow: 1;"></div>
  <div style="flex-grow: 1;"></div>
</div>
 *
 */

package com.facebook.csslayout;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CSSLayoutMarginTest {
  @Test
  public void test_margin_start() {
    final CSSNode root = new CSSNode();
    root.setFlexDirection(CSSFlexDirection.ROW);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setMargin(Spacing.START, 10);
    root_child0.setStyleWidth(10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(10, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(10, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(80, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(10, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_top() {
    final CSSNode root = new CSSNode();
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setMargin(Spacing.TOP, 10);
    root_child0.setStyleHeight(10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(10, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(10, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_end() {
    final CSSNode root = new CSSNode();
    root.setFlexDirection(CSSFlexDirection.ROW);
    root.setJustifyContent(CSSJustify.FLEX_END);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setMargin(Spacing.END, 10);
    root_child0.setStyleWidth(10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(80, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(10, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(10, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(10, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_bottom() {
    final CSSNode root = new CSSNode();
    root.setJustifyContent(CSSJustify.FLEX_END);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setMargin(Spacing.BOTTOM, 10);
    root_child0.setStyleHeight(10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(80, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(10, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(80, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(10, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_and_flex_row() {
    final CSSNode root = new CSSNode();
    root.setFlexDirection(CSSFlexDirection.ROW);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root_child0.setMargin(Spacing.START, 10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(10, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(90, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(90, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_and_flex_column() {
    final CSSNode root = new CSSNode();
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root_child0.setMargin(Spacing.TOP, 10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(90, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(90, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_and_stretch_row() {
    final CSSNode root = new CSSNode();
    root.setFlexDirection(CSSFlexDirection.ROW);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root_child0.setMargin(Spacing.TOP, 10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(90, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(10, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(90, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_and_stretch_column() {
    final CSSNode root = new CSSNode();
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root_child0.setMargin(Spacing.START, 10);
    root.addChildAt(root_child0, 0);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(10, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(90, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(90, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_with_sibling_row() {
    final CSSNode root = new CSSNode();
    root.setFlexDirection(CSSFlexDirection.ROW);
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root.addChildAt(root_child0, 0);

    final CSSNode root_child1 = new CSSNode();
    root_child1.setFlexGrow(1);
    root.addChildAt(root_child1, 1);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(50, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(50, root_child1.getLayoutX(), 0.0f);
    assertEquals(0, root_child1.getLayoutY(), 0.0f);
    assertEquals(50, root_child1.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child1.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(50, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(50, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child1.getLayoutX(), 0.0f);
    assertEquals(0, root_child1.getLayoutY(), 0.0f);
    assertEquals(50, root_child1.getLayoutWidth(), 0.0f);
    assertEquals(100, root_child1.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_margin_with_sibling_column() {
    final CSSNode root = new CSSNode();
    root.setStyleWidth(100);
    root.setStyleHeight(100);

    final CSSNode root_child0 = new CSSNode();
    root_child0.setFlexGrow(1);
    root.addChildAt(root_child0, 0);

    final CSSNode root_child1 = new CSSNode();
    root_child1.setFlexGrow(1);
    root.addChildAt(root_child1, 1);
    root.setDirection(CSSDirection.LTR);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(50, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child1.getLayoutX(), 0.0f);
    assertEquals(50, root_child1.getLayoutY(), 0.0f);
    assertEquals(100, root_child1.getLayoutWidth(), 0.0f);
    assertEquals(50, root_child1.getLayoutHeight(), 0.0f);

    root.setDirection(CSSDirection.RTL);
    root.calculateLayout(null);

    assertEquals(0, root.getLayoutX(), 0.0f);
    assertEquals(0, root.getLayoutY(), 0.0f);
    assertEquals(100, root.getLayoutWidth(), 0.0f);
    assertEquals(100, root.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child0.getLayoutX(), 0.0f);
    assertEquals(0, root_child0.getLayoutY(), 0.0f);
    assertEquals(100, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(50, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(0, root_child1.getLayoutX(), 0.0f);
    assertEquals(50, root_child1.getLayoutY(), 0.0f);
    assertEquals(100, root_child1.getLayoutWidth(), 0.0f);
    assertEquals(50, root_child1.getLayoutHeight(), 0.0f);
  }

}
